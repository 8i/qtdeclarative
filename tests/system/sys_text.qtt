/****************************************************************************
**
** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the test suite of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser General Public
** License version 2.1 as published by the Free Software Foundation and
** appearing in the file LICENSE.LGPL included in the packaging of this
** file. Please review the following information to ensure the GNU Lesser
** General Public License version 2.1 requirements will be met:
** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain additional
** rights. These rights are described in the Nokia Qt LGPL Exception
** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU General
** Public License version 3.0 as published by the Free Software Foundation
** and appearing in the file LICENSE.GPL included in the packaging of this
** file. Please review the following information to ensure the GNU General
** Public License version 3.0 requirements will be met:
** http://www.gnu.org/copyleft/gpl.html.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms and
** conditions contained in a signed written agreement between you and Nokia.
**
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

//TESTED_COMPONENT=qtdeclarative

testcase = {

    text_formatting_data: {
        // Text type, autotext, plain text, rich text, styled text
        BasicText: ["Basic","plain, unformatted red text","plain, unformatted red text","plain, unformatted red text","plain, unformatted red text"],
        Rich: ["Rich","bold style","surrounding b,/b tags and no formatting","bold style","bold style"]
    },

    text_formatting: function(texttype,autoformat,plainformat,richformat,styledformat) {
        // Test Meta-data
        testTitle = "Text Formats";
        testBinary = "qmlscene tests/testapplications/text/text.qml";
        testGoal = "Verify that text shows correctly when displayed in different formats";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test Steps
        prompt(twiki('---+++ ' + testTitle + '<br><br>
        *Goal:* ' + testGoal + '<br>
        *Pre-Requisites:* ' + testPreconditions + '<br>
        *Tested Binary:* ' + testBinary + '<br>
    | *Step* | *Verification* |
    | Run ' + testBinary + ' | Verify that the Text application is displayed |
    | Select Text: '+texttype+', Format: AutoText controls | A single line of text is shown |
    | | Qt Quick should be rendered with '+autoformat+' |
    | Select the Wrap: Word option | A block of text is shown |
    | Select the Format: PlainText option | Qt Quick should be shown with '+plainformat+' |
    | Select the Format: RichText option | Qt Quick should be shown with '+richformat+' |
    | Select the Format: StyledText option | Qt Quick should be shown with '+styledformat+' |'));
    },

    text_wrapping_data: {
        // Text type, No wrap, word wrap, wrap anywhere, auto wrap
        Basic: ["Basic",
            "two lines, wrapped at the newline (Qt Quick consists...)",
            "many lines, with no broken words",
            "many lines, words broken at the text boundary",
            "many lines, with no broken words"],
        Long: ["Long",
            "one lone line",
            "two lines, wrapped at the - (topboxesand...),",
            "many lines, wrapped at the boundary",
            "many lines, wrapped at the boundary, and specifically the - in set-top"],
        Rich: ["Rich",
            "two lines, wrapped at the break (Qt Quick consists...)",
            "many lines, with no broken words",
            "many lines, words broken at the text boundary",
            "many lines, with no broken words"]
    },

    text_wrapping: function(texttype,noWrap,wordWrap,anywhereWrap,autoWrap) {
        // Test Meta-data
        testTitle = "Wrap Modes";
        testBinary = "qmlscene tests/testapplications/text/text.qml";
        testGoal = "Verify that text wraps correctly with different wrap methods and text formats";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test Steps
        prompt(twiki('---+++ ' + testTitle + '<br><br>
        *Goal:* ' + testGoal + '<br>
        *Pre-Requisites:* ' + testPreconditions + '<br>
        *Tested Binary:* ' + testBinary + '<br>
    | *Step* | *Verification* |
    | Run ' + testBinary + ' | Verify that the Text application is displayed |
    | Select Text: '+texttype+', Format: AutoText controls | Verify '+noWrap+' is displayed |
    | Select the Wrap: Word option | Verify '+wordWrap+' is displayed |
    | Select the Wrap: Anywhere option | Verify '+anywhereWrap+' is displayed |
    | Select the Wrap: Auto option | Verify '+autoWrap+' is displayed |'));
    },

    text_styling_data: {
        // Text type
        Basic: ["Basic"],
        Long: ["Long"],
        Rich: ["Rich"]
    },

    text_styling: function(texttype) {
        // Test Meta-data
        testTitle = "Style Effects";
        testBinary = "qmlscene tests/testapplications/text/text.qml";
        testGoal = "Verify that styling (underline, strikeout etc) works as intended";
        testPreconditions = "None";
        testGroups = "BAT";

        // Test Steps
        prompt(twiki('---+++ ' + testTitle + '<br><br>
        *Goal:* ' + testGoal + '<br>
        *Pre-Requisites:* ' + testPreconditions + '<br>
        *Tested Binary:* ' + testBinary + '<br>
    | *Step* | *Verification* |
    | Run ' + testBinary + ' | Verify that the Text application is displayed |
    | Select Text: '+texttype+', Wrap: WordWrap | Verify the text is displayed, wrapped if necessary |
    | Select the U_Line: On option | Verify an underline is drawn under each character |
    | Select the Strike: On option | Verify a strikethrough is drawn through each character |
    | Select the Style: Outline option | Verify each character is red and has a green outline around it |
    | Select the SColor: Blue option | Verify each character is red and has a blue outline around it |
    | Select the Style: Raised option | Verify each character is red and has a blue shadow behind and below it |
    | Select the Style: Sunken option | Verify each character is red and has a blue shadow behind and above it |'));
    }
}